 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;

using System.Text;
using System.Threading.Tasks;

namespace RSPO 
{
    public partial class MyEntityContext : BrightstarEntityContext {
    	
    	static MyEntityContext() 
    	{
            InitializeEntityMappingStore();
        }
        
        /// <summary>
        /// Initialize the internal cache of entity attribute information.
        /// </summary>
        /// <remarks>
        /// This method is normally invoked from the static constructor for the generated context class.
        /// It is provided as a public static method to enable the use of the cached entity attribute 
        /// information without the need to construct a context (typically in test code). 
        /// In normal application code you should never need to explicitly call this method.
        /// </remarks>
        public static void InitializeEntityMappingStore()
        {
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.IAgent));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.IAgent, RSPO.Agent>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.IObject));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.IObject, RSPO.Object>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.IOffer));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.IOffer, RSPO.Offer>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.ILocation));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.ILocation, RSPO.Location>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.IProperty));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.IProperty, RSPO.Property>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.IPropertyType));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.IPropertyType, RSPO.PropertyType>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.IRole));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.IRole, RSPO.Role>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified BrightstarDB
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the BrightstarDB Data Object Store that will provide the entity objects</param>
    	public MyEntityContext(IDataObjectStore dataObjectStore) : base(dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
        /// <param name="updateGraphUri">OPTIONAL: The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// not defined, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">OPTIONAL: The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If not defined, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">OPTIONAL: The URI identifier of the graph that contains version number statements for entities. 
        /// If not defined, the <paramref name="updateGraphUri"/> will be used.</param>
    	public MyEntityContext(
    	    string connectionString, 
    		bool? enableOptimisticLocking=null,
    		string updateGraphUri = null,
    		IEnumerable<string> datasetGraphUris = null,
    		string versionGraphUri = null
        ) : base(connectionString, enableOptimisticLocking, updateGraphUri, datasetGraphUris, versionGraphUri)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
    	public MyEntityContext() : base()
    	{
    		InitializeContext();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration and the
    	//  specified target graphs
    	/// </summary>
        /// <param name="updateGraphUri">The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// set to null, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If set to null, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">The URI identifier of the graph that contains version number statements for entities. 
        /// If set to null, the value of <paramref name="updateGraphUri"/> will be used.</param>
    	public MyEntityContext(
    		string updateGraphUri,
    		IEnumerable<string> datasetGraphUris,
    		string versionGraphUri
    	) : base(updateGraphUri:updateGraphUri, datasetGraphUris:datasetGraphUris, versionGraphUri:versionGraphUri)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		Agents = 	new BrightstarEntitySet<RSPO.IAgent>(this);
    		Objects = 	new BrightstarEntitySet<RSPO.IObject>(this);
    		Offers = 	new BrightstarEntitySet<RSPO.IOffer>(this);
    		Locations = 	new BrightstarEntitySet<RSPO.ILocation>(this);
    		Properties = 	new BrightstarEntitySet<RSPO.IProperty>(this);
    		PropertyTypes = 	new BrightstarEntitySet<RSPO.IPropertyType>(this);
    		Roles = 	new BrightstarEntitySet<RSPO.IRole>(this);
    	}
    	
    	public IEntitySet<RSPO.IAgent> Agents
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.IObject> Objects
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.IOffer> Offers
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.ILocation> Locations
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.IProperty> Properties
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.IPropertyType> PropertyTypes
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.IRole> Roles
    	{
    		get; private set;
    	}
    	
        public IEntitySet<T> EntitySet<T>() where T : class {
            var itemType = typeof(T);
            if (typeof(T).Equals(typeof(RSPO.IAgent))) {
                return (IEntitySet<T>)this.Agents;
            }
            if (typeof(T).Equals(typeof(RSPO.IObject))) {
                return (IEntitySet<T>)this.Objects;
            }
            if (typeof(T).Equals(typeof(RSPO.IOffer))) {
                return (IEntitySet<T>)this.Offers;
            }
            if (typeof(T).Equals(typeof(RSPO.ILocation))) {
                return (IEntitySet<T>)this.Locations;
            }
            if (typeof(T).Equals(typeof(RSPO.IProperty))) {
                return (IEntitySet<T>)this.Properties;
            }
            if (typeof(T).Equals(typeof(RSPO.IPropertyType))) {
                return (IEntitySet<T>)this.PropertyTypes;
            }
            if (typeof(T).Equals(typeof(RSPO.IRole))) {
                return (IEntitySet<T>)this.Roles;
            }
            throw new InvalidOperationException(typeof(T).FullName + " is not a recognized entity interface type.");
        }
    
        } // end class MyEntityContext
        
}
namespace RSPO 
{
    
    public partial class Agent : BrightstarEntityObject, IAgent 
    {
    	public Agent(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Agent(BrightstarEntityContext context) : base(context, typeof(Agent)) { }
    	public Agent() : base() { }
    	#region Implementation of RSPO.IAgent
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String NickName
    	{
            		get { return GetRelatedProperty<System.String>("NickName"); }
            		set { SetRelatedProperty("NickName", value); }
    	}
    
    	public System.String PasswordHash
    	{
            		get { return GetRelatedProperty<System.String>("PasswordHash"); }
            		set { SetRelatedProperty("PasswordHash", value); }
    	}
    
    	public System.String Phone
    	{
            		get { return GetRelatedProperty<System.String>("Phone"); }
            		set { SetRelatedProperty("Phone", value); }
    	}
    
    	public System.String Email
    	{
            		get { return GetRelatedProperty<System.String>("Email"); }
            		set { SetRelatedProperty("Email", value); }
    	}
    	public System.Collections.Generic.ICollection<RSPO.IRole> Roles
    	{
    		get { return GetRelatedObjects<RSPO.IRole>("Roles"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Roles", value); }
    								}
    	public System.Collections.Generic.ICollection<RSPO.IProperty> Properties
    	{
    		get { return GetRelatedObjects<RSPO.IProperty>("Properties"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Properties", value); }
    								}
    	#endregion
    }
}
namespace RSPO 
{
    
    public partial class Object : BrightstarEntityObject, IObject 
    {
    	public Object(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Object(BrightstarEntityContext context) : base(context, typeof(Object)) { }
    	public Object() : base() { }
    	#region Implementation of RSPO.IObject
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public RSPO.ILocation Location
    	{
            get { return GetRelatedObject<RSPO.ILocation>("Location"); }
            set { SetRelatedObject<RSPO.ILocation>("Location", value); }
    	}
    
    	public System.String Address
    	{
            		get { return GetRelatedProperty<System.String>("Address"); }
            		set { SetRelatedProperty("Address", value); }
    	}
    
    	public System.Single Price
    	{
            		get { return GetRelatedProperty<System.Single>("Price"); }
            		set { SetRelatedProperty("Price", value); }
    	}
    
    	public RSPO.CurrencyEnum CurType
    	{
            		get { return GetRelatedProperty<RSPO.CurrencyEnum>("CurType"); }
            		set { SetRelatedProperty("CurType", value); }
    	}
    
    	public System.Single Area
    	{
            		get { return GetRelatedProperty<System.Single>("Area"); }
            		set { SetRelatedProperty("Area", value); }
    	}
    
    	public RSPO.AreaUnits AreaUnit
    	{
            		get { return GetRelatedProperty<RSPO.AreaUnits>("AreaUnit"); }
            		set { SetRelatedProperty("AreaUnit", value); }
    	}
    
    	public System.String ImageURL
    	{
            		get { return GetRelatedProperty<System.String>("ImageURL"); }
            		set { SetRelatedProperty("ImageURL", value); }
    	}
    
    	public System.Int32 Rooms
    	{
            		get { return GetRelatedProperty<System.Int32>("Rooms"); }
            		set { SetRelatedProperty("Rooms", value); }
    	}
    
    	public System.Int32 Floors
    	{
            		get { return GetRelatedProperty<System.Int32>("Floors"); }
            		set { SetRelatedProperty("Floors", value); }
    	}
    
    	public System.Int32 TotalFloors
    	{
            		get { return GetRelatedProperty<System.Int32>("TotalFloors"); }
            		set { SetRelatedProperty("TotalFloors", value); }
    	}
    
    	public RSPO.BuildingEnum BuildingType
    	{
            		get { return GetRelatedProperty<RSPO.BuildingEnum>("BuildingType"); }
            		set { SetRelatedProperty("BuildingType", value); }
    	}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    	public System.Collections.Generic.ICollection<RSPO.IAgent> Agents
    	{
    		get { return GetRelatedObjects<RSPO.IAgent>("Agents"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Agents", value); }
    								}
    	public System.Collections.Generic.ICollection<RSPO.IProperty> Properties
    	{
    		get { return GetRelatedObjects<RSPO.IProperty>("Properties"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Properties", value); }
    								}
    	#endregion
    }
}
namespace RSPO 
{
    
    public partial class Offer : BrightstarEntityObject, IOffer 
    {
    	public Offer(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Offer(BrightstarEntityContext context) : base(context, typeof(Offer)) { }
    	public Offer() : base() { }
    	public System.String ID { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of RSPO.IOffer
    
    	public RSPO.IObject Object
    	{
            get { return GetRelatedObject<RSPO.IObject>("Object"); }
            set { SetRelatedObject<RSPO.IObject>("Object", value); }
    	}
    
    	public RSPO.OfferEnum OfferType
    	{
            		get { return GetRelatedProperty<RSPO.OfferEnum>("OfferType"); }
            		set { SetRelatedProperty("OfferType", value); }
    	}
